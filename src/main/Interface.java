/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import crawl.CrawlManager;
import crawl.CrawlResult;
import crawl.Webpage;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;
import misc.WebBrowser;
import storage.ResultDeserializer;
import storage.ResultSerializer;
import storage.SaveLoad;

/**
 *
 * @author Yap Jie Xiang
 */
public class Interface extends javax.swing.JFrame implements Runnable {

    @Override
    public void run() {        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Dont touch
        initComponents();
        this.setVisible(true);

        initMyComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        inputPanel = new javax.swing.JPanel();
        searchPhrase = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        searchEnginePanel = new javax.swing.JPanel();
        searchEngine1 = new javax.swing.JComboBox<SearchEngine>();
        searchEngine2 = new javax.swing.JComboBox<SearchEngine>();
        radioButton_1 = new javax.swing.JRadioButton();
        radioButton_2 = new javax.swing.JRadioButton();
        radioButton_4 = new javax.swing.JRadioButton();
        tabbedPane = new javax.swing.JTabbedPane();
        crawlPanel = new javax.swing.JPanel();
        crawlScroll = new javax.swing.JScrollPane();
        crawlList = new javax.swing.JList();
        processPanel = new javax.swing.JPanel();
        processScroll = new javax.swing.JScrollPane();
        processTextArea = new javax.swing.JTextArea();
        saveLoadPanel = new javax.swing.JPanel();
        saveLoadScroll = new javax.swing.JScrollPane();
        saveLoadList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        webpagePanel = new javax.swing.JPanel();
        webpageScroll = new javax.swing.JScrollPane();
        webpageTextArea = new javax.swing.JTextArea();
        statusLabel = new javax.swing.JLabel();
        wordcountLabel = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        openPanel = new javax.swing.JPanel();
        openOnlineButton = new javax.swing.JButton();
        openOfflineButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mini Crawler");

        inputPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        searchPhrase.setText("Enter keyword here");
        searchPhrase.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Phrase"));
        searchPhrase.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchPhraseFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchPhraseFocusLost(evt);
            }
        });
        searchPhrase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchPhraseKeyPressed(evt);
            }
        });

        searchButton.setText("GO!");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchEnginePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Engines"));

        searchEngine1.setModel(new javax.swing.DefaultComboBoxModel(SearchEngine.values()));
        searchEngine1.setSelectedItem(SearchEngine.values()[1]);
        searchEngine1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEngine1ActionPerformed(evt);
            }
        });

        searchEngine2.setModel(new javax.swing.DefaultComboBoxModel(SearchEngine.values()));
        searchEngine2.setSelectedItem(SearchEngine.values()[0]);
        searchEngine2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEngine2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchEnginePanelLayout = new javax.swing.GroupLayout(searchEnginePanel);
        searchEnginePanel.setLayout(searchEnginePanelLayout);
        searchEnginePanelLayout.setHorizontalGroup(
            searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchEnginePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchEngine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchEngine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchEnginePanelLayout.setVerticalGroup(
            searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchEnginePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(searchEnginePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchEngine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchEngine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        buttonGroup.add(radioButton_1);
        radioButton_1.setText("1 Thread");

        buttonGroup.add(radioButton_2);
        radioButton_2.setSelected(true);
        radioButton_2.setText("2 Threads");

        buttonGroup.add(radioButton_4);
        radioButton_4.setText("4 Threads");

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                        .addComponent(searchPhrase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addComponent(searchEnginePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioButton_1)
                            .addComponent(radioButton_4)
                            .addComponent(radioButton_2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                        .addComponent(radioButton_1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioButton_2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioButton_4))
                    .addComponent(searchEnginePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchPhrase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        DefaultListModel<Webpage> listModel = new DefaultListModel<>();

        for(int i = 1; i < 13 ; i ++){
            Webpage temp = new Webpage("http://www.thislistisempty.com");

            listModel.addElement(temp);
        }
        crawlList.setModel(listModel);
        crawlList.setVisibleRowCount(12);
        crawlList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                crawlListValueChanged(evt);
            }
        });
        crawlScroll.setViewportView(crawlList);

        javax.swing.GroupLayout crawlPanelLayout = new javax.swing.GroupLayout(crawlPanel);
        crawlPanel.setLayout(crawlPanelLayout);
        crawlPanelLayout.setHorizontalGroup(
            crawlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(crawlScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );
        crawlPanelLayout.setVerticalGroup(
            crawlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(crawlScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Crawl", crawlPanel);

        processTextArea.setEditable(false);
        processTextArea.setColumns(20);
        processTextArea.setRows(5);
        processScroll.setViewportView(processTextArea);
        DefaultCaret caret = (DefaultCaret) processTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        javax.swing.GroupLayout processPanelLayout = new javax.swing.GroupLayout(processPanel);
        processPanel.setLayout(processPanelLayout);
        processPanelLayout.setHorizontalGroup(
            processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(processScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );
        processPanelLayout.setVerticalGroup(
            processPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(processScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Process", processPanel);

        saveLoadList.setModel(new DefaultListModel());
        saveLoadList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveLoadListMouseClicked(evt);
            }
        });
        saveLoadScroll.setViewportView(saveLoadList);

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(4, 4, 4))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(saveButton)
                .addComponent(loadButton)
                .addComponent(deleteButton))
        );

        javax.swing.GroupLayout saveLoadPanelLayout = new javax.swing.GroupLayout(saveLoadPanel);
        saveLoadPanel.setLayout(saveLoadPanelLayout);
        saveLoadPanelLayout.setHorizontalGroup(
            saveLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(saveLoadScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        saveLoadPanelLayout.setVerticalGroup(
            saveLoadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveLoadPanelLayout.createSequentialGroup()
                .addComponent(saveLoadScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabbedPane.addTab("Save/Load", saveLoadPanel);

        webpagePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        webpageTextArea.setEditable(false);
        webpageTextArea.setColumns(20);
        webpageTextArea.setRows(5);
        webpageTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Display"));
        webpageScroll.setViewportView(webpageTextArea);

        statusLabel.setText("Welcome to my MiniCrawler");

        wordcountLabel.setText("WC: ");

        separator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        openPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Open"));

        openOnlineButton.setText("Online");
        openOnlineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openOnlineButtonActionPerformed(evt);
            }
        });

        openOfflineButton.setText("Offline");
        openOfflineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openOfflineButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout openPanelLayout = new javax.swing.GroupLayout(openPanel);
        openPanel.setLayout(openPanelLayout);
        openPanelLayout.setHorizontalGroup(
            openPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(openPanelLayout.createSequentialGroup()
                .addComponent(openOnlineButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openOfflineButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        openPanelLayout.setVerticalGroup(
            openPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, openPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(openOnlineButton)
                .addComponent(openOfflineButton))
        );

        javax.swing.GroupLayout webpagePanelLayout = new javax.swing.GroupLayout(webpagePanel);
        webpagePanel.setLayout(webpagePanelLayout);
        webpagePanelLayout.setHorizontalGroup(
            webpagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(webpagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wordcountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(openPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(webpageScroll)
        );
        webpagePanelLayout.setVerticalGroup(
            webpagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(webpagePanelLayout.createSequentialGroup()
                .addComponent(openPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(webpageScroll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(webpagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(wordcountLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(separator, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabbedPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(webpagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(webpagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabbedPane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private SearchEngine searchEngine1Prev;
    private SearchEngine searchEngine2Prev;
    private CrawlManager crawlMain = null; // Make sure only one search is performed at a single time
    private CrawlResult currentData = null; // Used for SaveLoad

    private void initMyComponents() {
        searchEngine1Prev = (SearchEngine) searchEngine1.getSelectedItem();
        searchEngine2Prev = (SearchEngine) searchEngine2.getSelectedItem();

        // Load previous session
        ResultDeserializer load = new ResultDeserializer(this, "Session.ser");
        load.start();

        // Initialize saveLoadList
        SaveLoad.loadMap();
        refreshSaveLoadList();
    }

    private void searchEngine1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEngine1ActionPerformed
        // If selected is same as searchEngine2, revert to previous selection
        if (searchEngine1.getSelectedItem().equals(searchEngine2.getSelectedItem())) {
            searchEngine1.setSelectedItem(searchEngine1Prev);
            return;
        }

        // If selected value is changed, record the value for future use
        searchEngine1Prev = (SearchEngine) searchEngine1.getSelectedItem();
    }//GEN-LAST:event_searchEngine1ActionPerformed

    private void searchEngine2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEngine2ActionPerformed
        // If selected is same as searchEngine2, revert to previous selection
        if (searchEngine2.getSelectedItem().equals(searchEngine1.getSelectedItem())) {
            searchEngine2.setSelectedItem(searchEngine2Prev);
            return;
        }

        // If selected value is changed, record the value for future use
        searchEngine2Prev = (SearchEngine) searchEngine2.getSelectedItem();
    }//GEN-LAST:event_searchEngine2ActionPerformed

    private void searchPhraseFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchPhraseFocusGained
        // TODO add your handling code here:
        if (searchPhrase.getText().equals("Enter keyword here")) {
            searchPhrase.setText("");
        }
    }//GEN-LAST:event_searchPhraseFocusGained

    private void searchPhraseFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchPhraseFocusLost
        // TODO add your handling code here:
        if (searchPhrase.getText().equals("")) {
            searchPhrase.setText("Enter keyword here");
        }
    }//GEN-LAST:event_searchPhraseFocusLost

    private void openOnlineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openOnlineButtonActionPerformed
        // Get the selected webpage
        Webpage selected = (Webpage) crawlList.getSelectedValue();

        // Make sure an item is selected
        if (selected == null) {
            JOptionPane.showMessageDialog(null, "Please select an item", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Open webpage in a browser
        WebBrowser.openOnline(selected.toString());

    }//GEN-LAST:event_openOnlineButtonActionPerformed

    private void openOfflineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openOfflineButtonActionPerformed
        // Get the selected webpage
        Webpage selected = (Webpage) crawlList.getSelectedValue();

        // Make sure an item is selected
        if (selected == null) {
            JOptionPane.showMessageDialog(null, "Please select an item", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check webpage source is not empty
        String html = selected.getHtml();
        if (html == null) {
            JOptionPane.showMessageDialog(null, "Source is empty", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Open webpage in a browser, offline
        WebBrowser.openOffline(html);

    }//GEN-LAST:event_openOfflineButtonActionPerformed

    private void crawlListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_crawlListValueChanged
        // Make sure the selected value is not null
        Webpage selection = (Webpage) crawlList.getSelectedValue();
        if (selection == null) {
            return;
        }

        // Update JTextArea
        String text = selection.getHtml();
        if (text.equals("")) {
            text = "Empty";
        }
        webpageTextArea.setText(text);

        // Set Word Count
        wordcountLabel.setText("WC: " + selection.getWordCount());
    }//GEN-LAST:event_crawlListValueChanged

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // Do a simple search phrase validation
        String keyword = searchPhrase.getText();
        if (keyword.equals("") || keyword.equals("Enter keyword here")) {
            JOptionPane.showMessageDialog(null, "Please enter a search keyword", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get the searchEngines to use
        SearchEngine se1 = (SearchEngine) searchEngine1.getSelectedItem();
        SearchEngine se2 = (SearchEngine) searchEngine2.getSelectedItem();

        // Get the number of threads to use
        int numThreads;
        if (radioButton_1.isSelected()) {
            numThreads = 1;
        } else if (radioButton_2.isSelected()) {
            numThreads = 2;
        } else {
            numThreads = 4;
        }

        // Make sure only one search is performed at a time
        // if there is already a process running, return
        if (crawlMain != null && crawlMain.isAlive()) {
            JOptionPane.showMessageDialog(null, "Only one search can be performed at a time", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Use a seperate thread to prevent the GUI from freezing temporarily
        // CrawlMain does everything
        crawlMain = new CrawlManager(this, keyword, se1, se2, numThreads);
        crawlMain.start();

        // Change tab for the user
        tabbedPane.setSelectedIndex(1);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchPhraseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchPhraseKeyPressed
        // Start search if user presses enter
        if (evt.getKeyCode() == 10) {
            searchButtonActionPerformed(null);
        }
    }//GEN-LAST:event_searchPhraseKeyPressed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        SaveLoad.save(currentData);
        refreshSaveLoadList();

    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed

        // if there is already a process running, return
        if (crawlMain != null && crawlMain.isAlive()) {
            JOptionPane.showMessageDialog(null, "Only one search can be performed at a time", "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Load data
        SaveLoad.load((String) saveLoadList.getSelectedValue(), this);

        // Change tab for the user
        tabbedPane.setSelectedIndex(0);
    }//GEN-LAST:event_loadButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(rootPane, "Confirm remove?");
        if (option != JOptionPane.OK_OPTION) {
            return;
        }

        SaveLoad.delete((String) saveLoadList.getSelectedValue());
        refreshSaveLoadList();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void saveLoadListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveLoadListMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() >= 2) {
            loadButtonActionPerformed(null);
        }
    }//GEN-LAST:event_saveLoadListMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JList crawlList;
    private javax.swing.JPanel crawlPanel;
    private javax.swing.JScrollPane crawlScroll;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton openOfflineButton;
    private javax.swing.JButton openOnlineButton;
    private javax.swing.JPanel openPanel;
    private javax.swing.JPanel processPanel;
    private javax.swing.JScrollPane processScroll;
    private javax.swing.JTextArea processTextArea;
    private javax.swing.JRadioButton radioButton_1;
    private javax.swing.JRadioButton radioButton_2;
    private javax.swing.JRadioButton radioButton_4;
    private javax.swing.JButton saveButton;
    private javax.swing.JList saveLoadList;
    private javax.swing.JPanel saveLoadPanel;
    private javax.swing.JScrollPane saveLoadScroll;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<SearchEngine> searchEngine1;
    private javax.swing.JComboBox<SearchEngine> searchEngine2;
    private javax.swing.JPanel searchEnginePanel;
    private javax.swing.JTextField searchPhrase;
    private javax.swing.JSeparator separator;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JPanel webpagePanel;
    private javax.swing.JScrollPane webpageScroll;
    private javax.swing.JTextArea webpageTextArea;
    private javax.swing.JLabel wordcountLabel;
    // End of variables declaration//GEN-END:variables

    synchronized public void reportStatus(String threadName, String statusMessage) {
        // Format the message as desired
        String message = (threadName == null) ? statusMessage : threadName + ": " + statusMessage;

        // Update statusLabel (the tiny status on the bottom right)
        statusLabel.setText(message);

        // Update processTextArea (Contains the status of all threads)
        processTextArea.append(message);
        processTextArea.append("\n");
    }

    synchronized public void reportResult(CrawlResult result) {

        // Change tab for the user
        tabbedPane.setSelectedIndex(0);

        // Save the result
        ResultSerializer save = new ResultSerializer(result, "Session.ser");
        save.start();

        // Wait for results to be saved
        try {
            save.join();
        } catch (InterruptedException e) {

        }

        DefaultListModel<Webpage> newModel = new DefaultListModel<>();
        currentData = new CrawlResult(result.getSearchString(), result.getSe1(), result.getSe2());

        // Transfer items into new model
        while (!result.isEmpty()) {
            Webpage temp = (Webpage) result.poll();
            currentData.add(temp);
            newModel.addElement(temp);
        }

        // Set the new model
        crawlList.setModel(newModel);

    }

    public void refreshSaveLoadList() {

        DefaultListModel<String> newModel = new DefaultListModel<>();

        // Transfer items into new model
        Set<String> items = SaveLoad.list();
        for (String s : items) {
            newModel.addElement(s);
        }

        // Set the new model
        saveLoadList.setModel(newModel);
    }
}
